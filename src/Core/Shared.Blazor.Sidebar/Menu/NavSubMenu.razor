@using Microsoft.AspNetCore.Components.Web
@using Niu.Nutri.Core.Application.DTO.Extensions
@using Niu.Nutri.Shared.Blazor.Sidebar.Contexts
@using Niu.Nutri.SystemSettings.Application.DTO.Aggregates.SystemSettingsAgg.Requests
@using System.Reflection;
@using Microsoft.AspNetCore.SignalR.Client;
@using Niu.Nutri.CrossCuting.Infra.Utils.Extensions;
@using Niu.Nutri.Users.Application.DTO.Aggregates.UsersAgg.Requests;

@rendermode RenderMode.InteractiveServer

<div class="container-submenu">
    <div class="submenu">
        @if (SubItems == null)
        {
            <Loading />
        }
        else
        {
            @foreach (var item in this.SubItems.Where(x => x.IsSubItem == false))
            {
                <div class="container-itens-submenu">
                    <div class="container-label-icon-item-submenu" @onclick="async ()=>{ await OnsubMenuClicked(item); }">
                        <div class="container-label-item-submenu">
                            <div class="label-item-submenu">@item.Description</div>
                        </div>
                        @if (!item.LinkDireto)
                        {
                            <div class="container-icon-item-submenu @(IsClicked(item) ? "" : "active" )">
                                <img class="icon-accordeon-item-submenu" src="https://anima-uploads.s3.amazonaws.com/projects/63486f9b8ee4feae84ab3e5a/releases/6348a3ac47ad68baec98b785/img/ep-arrow-right-bold-3@2x.svg" />
                            </div>
                        }
                    </div>

                    @if (IsClicked(item) && item.SubItems?.Any() == true)
                    {
                        @foreach (var subItem in item.SubItems)
                        {
                            <div class="filho-submenu" @onclick="CloseMenu">
                                <a class="link-filho-submenu" @onclick="CloseMenu" href="@subItem.Url"> @subItem.Description </a>
                            </div>
                        }
                    }
                </div>
            }
        }
    </div>
    <div class="build-version-container">
        <div class="build-version">
            <span class="build-version-text">version: <b></b></span>
        </div>
    </div>
</div>

@code {
    bool initialized = false;
    string clickedId;
    [Parameter] public int ParentId { get; set; }
    [Parameter] public RenderFragment MyActionButtonFragment { get; set; }
    [Parameter] public EventCallback<RenderFragment> MyActionButtonFragmentChanged { get; set; }

    //[Inject] IConfiguration Configuration { get; set; }

    [Inject] HttpClient _http { get; set; }
    [Inject] SidebarContext SidebarContext { get; set; }

    [Inject] public NavigationManager NavigationManager { get; set; }
    List<SystemPanelSubItemDTO> SubItems;
    [Inject] public UserCurrentAccessSelectedDTO CachedUserSession { get; set; }

    [Parameter] public HubConnection HubConnection { get; set; }

    [Parameter] public Func<Task> OnCloseMenu { get; set; }

    bool IsClicked(SystemPanelSubItemDTO item) => this.clickedId == item.ExternalId;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.SubItems = (await _http.SearchAsync<SystemPanelSubItemDTO>($"{nameof(SystemPanelSubItemDTO.SystemPanelId)}Equal={this.ParentId}&size=1000")).Data;

            this.initialized = true;
            await InvokeAsync(this.StateHasChanged);

            //HubConnection.On<SystemPanelDTO>("UpdateMenuItems", UpdateSubModel);
            //HubConnection.On<SystemPanelSubItemDTO>("UpdateSubModel", UpdateSubSUBModel);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task OpenSubMenu(SystemPanelSubItemDTO item)
    {
        this.clickedId = item.ExternalId;
        this.SidebarContext.isSubMenuActive = true;
        await InvokeAsync(this.StateHasChanged);
    }

    public async Task Close()
    {
        this.clickedId = null;
        this.SidebarContext.isSubMenuActive = false;
        await InvokeAsync(this.StateHasChanged);
    }

    public async Task OnsubMenuClicked(SystemPanelSubItemDTO selectedItem)
    {
        var wasActive = selectedItem.ExternalId == this.clickedId;

        if (wasActive)
        {
            this.clickedId = null;
        }
        else
            this.clickedId = selectedItem.ExternalId;

        if (selectedItem.LinkDireto || selectedItem.IsSubItem == true)
        {
            await CloseMenu();

            CachedUserSession.SelectedPage.Update(selectedItem);
            CachedUserSession.SelectedPage.Id = selectedItem.Id;

            NavigationManager.NavigateTo(selectedItem?.Url!, forceLoad: this.NavigationManager.Uri.Replace(this.NavigationManager.BaseUri, "") == selectedItem.Url);
        }
    }

    private RenderFragment AddContent(Type type)
     => builder =>
         {
             builder.OpenComponent(0, type);
             builder.CloseComponent();
         };

    async Task CloseMenu()
    {
        //var hubConnection = new HubConnectionBuilder()
        //                 .WithUrl(NavigationManager.ToAbsoluteUri("/sidebarhub"))
        //                 .Build();
        //await hubConnection.StartAsync();

        //await InvokeAsync(this.SidebarContext.Sidebar.Close);
        this.clickedId = null;
        await Close();
        await OnCloseMenu();
        //await this.SidebarContext.Sidebar.Close();
        //await hubConnection.SendAsync("CloseSidebar");

    }

    public async Task UpdateSubModel(SystemPanelDTO panel)
    {
        if (panel?.Id.HasValue == true)
        {
            this.SubItems = null!;
            await InvokeAsync(StateHasChanged);

            this.ParentId = panel.Id.Value;
            //this.SelectedItem = panel;
            this.SubItems = (await _http.SearchAsync<SystemPanelSubItemDTO>($"{nameof(SystemPanelSubItemDTO.SystemPanelId)}Equal={panel.Id}&size=100")).Data;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task UpdateSubSUBModel(SystemPanelSubItemDTO panel)
    {
        SystemPanelSubItemDTO myPanel;

        if (panel.IsSubItem == true)
            myPanel = this.SubItems.SelectMany(x => x.SubItems).FirstOrDefault(x => x.ExternalId == panel.ExternalId);
        else
            myPanel = this.SubItems.FirstOrDefault(x => x.ExternalId == panel.ExternalId);

        if (myPanel == null)
        {
            if (panel.IsSubItem == true)
            {
                this.SubItems.FirstOrDefault(x => x.Id == panel.SystemPanelSubItemId).SubItems.Add(panel);
            }
            else
            {
                this.SubItems.Add(panel);
            }
        }
        else
        {
            myPanel.Update(panel);
        }
        await InvokeAsync(this.StateHasChanged);
    }

    public async Task RefreshMe()
    {
        await InvokeAsync(this.StateHasChanged);
    }

    public async Task RefreshElements()
    {
        this.SubItems = (await _http.SearchAsync<SystemPanelSubItemDTO>($"{nameof(SystemPanelSubItemDTO.SystemPanelId)}Equal={this.ParentId}&size=1000")).Data;
        await InvokeAsync(this.StateHasChanged);
    }
}