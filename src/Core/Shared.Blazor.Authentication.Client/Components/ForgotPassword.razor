@using Microsoft.AspNetCore.Authorization;

@rendermode RenderMode.InteractiveWebAssembly

@layout AuthLayout

@inject IAuthorizeApi authorizeApi
@inject NavigationManager navigationManager

@inherits BaseLoginPage<ForgotPasswordParametersDTO, ForgotPasswordParametersValidator>

<PageContainer @ref=base.PageContainer>
    <ChildContent>
        <GoBackLink href="/login" />

        <EditForm EditContext="base.EditContext" FormName="forgot-password">
            <FormFluentValidator @ref=_validatorComponent Validator="this.Validator"
                                 OnValidSubmit="OnSubmit"
                                 OnInvalidSubmit="OnSubmitFormInvalid" />

            <section class="form-input-section">
                <fieldset>
                    <TextInput Class="max" 
                               @bind-Value="@this.Model.EmailOrPhone"
                               Label="E-mail ou nº do celular"
                               OnInput="OnEmailOrPhoneChanged"
                               Masks="[Masks.Phone, Masks.Email]"
                               Placeholder="Digite seu E-Mail ou Telefone para recuperação de senha." />

                    <div class="input-error">
                        <ValidationMessage For="@(() => Model.EmailOrPhone)"></ValidationMessage>
                    </div>
                </fieldset>
            </section>

            <div class="buttons">
                @if (this._isSubmiting)
                {
                    <DefaultButton MobileFullWidth="true">
                        <Loading />
                    </DefaultButton />
                }
                else
                {
                    <DefaultButton MobileFullWidth="true" Text="Enviar email" />
                }
            </div>
        </EditForm>
    </ChildContent>
</PageContainer>

@code {

    async Task OnEmailOrPhoneChanged() => await base.OnPropertyChanged(propName: nameof(LoginParametersDTO.EmailOrPhone));

    protected async override Task OnSubmitForm(EditContext editContext)
    {
        var result = await authorizeApi.ForgotPassword(Model);

        if(!result.Success)
        {
            await base.SetErrors(result.Errors.ToList()); return; 
        }

        _isEmailSent = true;
        navigationManager.NavigateTo($"/login/codigo-verificacao/token/{result.Data}"); return;
    }
}