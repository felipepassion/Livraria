@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Logging
@using Niu.Nutri.Core.Application.DTO.Aggregates.CommonAgg.Models.Auth
@using Niu.Nutri.Shared.Blazor.Authentication.Client.Layout
@using Niu.Nutri.Shared.Blazor.Authentication.Client.Providers
@using Niu.Nutri.WebApp.Client.Services.Auth

@rendermode RenderMode.InteractiveWebAssembly

@inject IAuthorizeApi authorizeApi
@inject ILogger<Login> Logger
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authStateProvider

@inherits BaseLoginPage<LoginParametersDTO, LoginValidator>

@layout AuthLayout

@if(_isLoading)
{
    <LoginSplashScreen />
}
else {
    <PageContainer CssStyle="login--section" @ref=base.PageContainer>
        <ChildContent>
            <h1 class="titulo">Seja bem-vindo(a)</h1>

            <EditForm Model="this.Model" FormName="login">

                <FormFluentValidator   @ref=_validatorComponent Validator="this.Validator" OnValidSubmit="OnSubmit"
                OnInvalidSubmit="OnSubmitFormInvalid" />

                <section class="form-input-section">
                    <fieldset>
                        <TextInput Class="max"
                        @bind-Value="@this.Model.EmailOrPhone"
                        Label="E-mail"
                        Masks="[Masks.Phone, Masks.Email]"
                        OnInput="OnEmailOrPhoneChanged"
                        Placeholder="catarina@gmail.com" />

                        <div class="input-error">
                            <ValidationMessage For="@(() => Model.EmailOrPhone)"></ValidationMessage>
                        </div>
                    </fieldset>

                    <fieldset>
                        <TextInput Class="max" 
                        Type=password 
                        @bind-Value="@this.Model.Password" 
                        Label="Senha"
                        OnInput="OnPasswordChanged"
                        Placeholder="•••••••••••" />

                        <div class="input-error">
                            <ValidationMessage For="@(() => Model.Password)"></ValidationMessage>
                            <a class="forgot-password-link" href="/login/esqueci-minha-senha">Esqueci minha senha</a>
                        </div>
                    </fieldset>
                </section>

                <div class="login-links">
                </div>

                <div class="login-buttons">
                    @if (this._isSubmiting)
                    {
                        <DefaultButton MobileFullWidth="true">
                            <Niu.Nutri.Shared.Blazor.Components.GenericComponents.Loading />
                        </DefaultButton />
                    }
                    else
                    {
                        <DefaultButton MobileFullWidth="true" Text="Entrar" />
                    }
                </div>

                <span class="login-no-account-link">
                    Não tem uma conta? <a href="/login/registro">Cadastre-se</a>
                </span>
            </EditForm>
        </ChildContent>
    </PageContainer>
}

@code {
    private bool _isLoading = true;

    async Task OnEmailOrPhoneChanged() => await base.OnPropertyChanged(propName: nameof(LoginParametersDTO.EmailOrPhone));
    async Task OnPasswordChanged() => await base.OnPropertyChanged(propName: nameof(LoginParametersDTO.Password));

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/", true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected async override Task OnSubmitForm(EditContext editContext)
    {
        var customAuthProvider = (CookieAuthenticationStateProvider)authStateProvider;
        var result = await customAuthProvider.LoginAndGetAuthenticationState(this.Model.EmailOrPhone,
                                                                             this.Model.Password,
                                                                             true);
        if (!result.Success)
        {
            await base.SetErrors(result.Errors.ToList());
            return;
        }
        navigationManager.NavigateTo($"{(ReturnUrl?.Contains('/') == true ? $"{ReturnUrl}" : ($"/{ReturnUrl}"))}", true);
    }
}
