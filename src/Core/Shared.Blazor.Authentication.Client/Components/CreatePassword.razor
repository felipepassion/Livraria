@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization

@rendermode RenderMode.InteractiveWebAssembly
@inject AuthenticationStateProvider authStateProvider

@attribute [AllowAnonymous]

@inject NavigationManager navigationManager
@inject IAuthorizeApi authorizeApi

@inherits BaseLoginPage<CreatePasswordParametersDTO, CreatePasswordParametersValidator>

<PageContainer @ref=base.PageContainer>
    <ChildContent>
        <EditForm EditContext="base.EditContext" FormName="create-password">

            <FormFluentValidator @ref=_validatorComponent
                Validator="this.Validator"
                OnValidSubmit="OnSubmit"
                OnInvalidSubmit="OnSubmitFormInvalid" />

            <section class="forgot-password__fields">
                <fieldset>
                    <TextInput Class="max"
                           Type="password"
                           OnInput="OnPasswordChanged"
                           @bind-Value="@this.Model.Password"
                           Label="Senha"
                           Placeholder="••••••••" />

                    <div class="input-error">
                        <ValidationMessage For="@(() => Model.Password)"></ValidationMessage>
                    </div>
                </fieldset>
                
                <fieldset>
                    <TextInput OnInput="OnPasswordChanged"
                           Class="max" 
                           Type="password"
                           @bind-Value="@this.Model.ConfirmPassword" 
                           Label="Confirme sua senha" 
                           Placeholder="••••••••" /> 

                    <div class="input-error">
                        <ValidationMessage For="@(() => Model.ConfirmPassword)"></ValidationMessage>
                    </div>
                </fieldset>   
            </section>

           <div class="buttons">
               @if (this._isSubmiting)  
           {
                <DefaultButton MobileFullWidth="true">
                    <Loading />
                </DefaultButton/>
            } else {
                <DefaultButton MobileFullWidth="true" Text="Alterar senha" />
            }
           </div>
        </EditForm>
    </ChildContent>
</PageContainer>

@code {
    [Parameter] public required string UserName { get; init; }
    [Parameter] public required string TokenValue { get; init; }

    async Task OnPasswordChanged() => await base.OnPropertyChanged(propName: nameof(CreatePasswordParametersDTO.Password));

    protected override Task OnInitializedAsync()
    {
        Model.Code = this.TokenValue;
        Model.UserName = this.UserName;
        return base.OnInitializedAsync();
    }

    protected async override Task OnSubmitForm(EditContext editContext)
    {
        var result = await authorizeApi.CreatePassword(Model);

        if (result.Success)
        {
            navigationManager.NavigateTo("/", true);
        }

        await base.SetErrors(result.Errors.ToList());
    }
}