@page "/login/codigo-verificacao/token/{UserId}"

@rendermode RenderMode.InteractiveWebAssembly

@using Microsoft.AspNetCore.Authorization;

@inject NavigationManager navigationManager
@attribute [AllowAnonymous]
@layout AuthLayout

@inject IJSRuntime JSRuntime
@inject IAuthorizeApi authorizeApi

@inherits BaseLoginPage<TokenModelDTO, TokenParametersValidator>

<PageContainer @ref=base.PageContainer>
    <ChildContent>
        <EditForm EditContext="base.EditContext" FormName="token-change-form">

            <FormFluentValidator 
                @ref=_validatorComponent
                Validator="this.Validator"
                OnValidSubmit="OnSubmit"
                OnInvalidSubmit="OnSubmitFormInvalid"
            />

            <div class="code-inputs">
                <input id="input0" maxlength="1" @bind-value:after="UpdateToken" @bind-value="inputRefs[0]" @onkeyup="e => HandleKey(0, e)" />
                <input id="input1" maxlength="1" @bind-value:after="UpdateToken" @bind-value="inputRefs[1]" @onkeyup="e => HandleKey(1, e)" />
                <input id="input2" maxlength="1" @bind-value:after="UpdateToken" @bind-value="inputRefs[2]" @onkeyup="e => HandleKey(2, e)" />
                <input id="input3" maxlength="1" @bind-value:after="UpdateToken" @bind-value="inputRefs[3]" @onkeyup="e => HandleKey(3, e)" />
                <input id="input4" maxlength="1" @bind-value:after="UpdateToken" @bind-value="inputRefs[4]" @onkeyup="e => HandleKey(4, e)" />
                <input id="input5" maxlength="1" @bind-value:after="UpdateToken" @bind-value="inputRefs[5]" @onkeyup="e => HandleKey(5, e)" />
            </div

            <div class="action-row">
                @if (_isResendingEmail)
                {
                    <DefaultButton>
                        <Loading />
                    </DefaultButton>
                } else
                {
                    <a @onclick="OnClickResendCode" class="resend-code">Reenviar código</a>    
                }

                @if (_isSubmiting)
                {
                    <DefaultButton>
                        <Loading />
                    </DefaultButton>
                }
                else
                {
                    <DefaultButton Text="Verificar código" />
                }
            </div>
        </EditForm>
    </ChildContent>
</PageContainer>

@code {

    private string[] inputRefs = new string[6];
    bool _isOnInput = false;
    bool _isResendingEmail = false;
    string[] inputs = new string[6];

    [Parameter] public required string UserName { get; init; }

    protected override async Task OnSubmitForm(EditContext editContext)
    {

        Model.UserName = this.UserName;

        var result = await authorizeApi.VerifyForgotPasswordToken(Model);

        if (result.Success)
        {
            var token = result.Data.ToString();
            navigationManager.NavigateTo($"/login/criar-senha/{UserName}?token={token}");
        }

        await base.SetErrors(result.Errors.ToList());
        return;
    }

    private async Task HandleKey(int index, KeyboardEventArgs e)
    {
        if (!_isSubmiting)
        {
            _isSubmiting = true;
            ErrorsList = new List<string>();
            StateHasChanged();
            if (!_isOnInput)
            {
                _isOnInput = true;
                if (char.IsDigit(e.Key[0])) // Se for um dígito
                {
                    if (index != inputRefs.Length - 1)
                        await JSRuntime.InvokeVoidAsync("getNextInputToken", (index + 1).ToString());
                }
                else if (e.Key == "Backspace") // Se for backspace
                {
                    if (index != 0)
                        await JSRuntime.InvokeVoidAsync("getNextInputToken", (index - 1).ToString());
                }
                _isOnInput = false;
            }
            _isSubmiting = false;
            StateHasChanged();
        }
    }

    private async Task ManageInputs()
    {
        await JSRuntime.InvokeVoidAsync("manageInputs");
    }

    private void UpdateToken()
    {
        Model.TokenValue = "";
        foreach (var item in inputRefs)
        {
            Model.TokenValue += item;
        }
        JSRuntime.InvokeVoidAsync("console.log", $"Valor de input: {Model.TokenValue}");
    }

    private async Task OnClickResendCode()
    {
        _isResendingEmail = true;

        var result = await authorizeApi.ForgotPassword(new ForgotPasswordParametersDTO() { EmailOrPhone = this.UserName });

        if(!result.Success)
        {
            await base.SetErrors(result.Errors.ToList()); 
            _isResendingEmail = false;
            return; 
        }

        _isResendingEmail = false;
        await base.SetSuccessMessages(["Código reenviado com sucesso."]);
    }

}
