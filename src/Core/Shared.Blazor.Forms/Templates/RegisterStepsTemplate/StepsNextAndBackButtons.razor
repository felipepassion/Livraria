@using Core.Application.DTO.Aggregates.CommonAgg.Models;
@using Niu.Nutri.Core.Application.DTO.Http.Models.CommonAgg.Commands.Responses
@using Niu.Nutri.Shared.Blazor.Forms.Templates.RegisterStepsTemplate.Contexts
@using System.Net.Http.Json
@using Users.Application.DTO.Aggregates.UsersAgg.Requests;

@if (Context != null)
{
    @if (!HideNavigationButtons)
    {
        <div class="container-rodape-formulario">
            <div class="container-btn-voltar-proxima">
                @if (this.Context?.StepsContext?.CurrentStep > 0)
                {
                    <button type="submit" class="btn-voltar" @onclick="Context.StepsContext.Backward">Back</button>
                }
                @if (this.Context.IsAutoSaving || this.Context.IsSubmiting)
                {
                    <button type="submit" @onclick="OnSubmitBtnCLicked" class="btn-proxima">
                        <Loading />
                    </button>
                }
                else
                {
                    <button type="submit" @onclick="OnSubmitBtnCLicked" class="btn-proxima">
                        @(NextNavButtonText ?? (Context?.StepsContext?.MaxSteps == 1 || Context?.StepsContext?.CurrentStep == Context?.StepsContext?.MaxSteps ? "Save" : "Next"))
                    </button>
                }
            </div>
        </div>
    }
    else
    {
        <button style="display:none" type="submit" @onclick="OnSubmitBtnCLicked" class="btn-proxima">
            @(NextNavButtonText ?? (Context?.StepsContext?.MaxSteps == 1 || Context?.StepsContext?.CurrentStep == Context?.StepsContext?.MaxSteps ? "Save" : "Next"))
        </button>
    }
}

@*<div class="container-rodape-formulario">
    <div class="container-responsavel-formulario">
        <div class="container-avatar-responsavel-formulario">
            <img class="avatar-responsavel-formulario" />
            <div class="container-reponsavel-formulario">
                <div class="responsavel-formulario">Responsável:</div>
                <div class="nome-responsavel-formulario">@_user?.Name</div>
            </div>
        </div>
        <div class="container-dt-hora-formulario">
            <div class="dt-formulario">@DateTime.Now.ToString("dd/MM/yyyy")</div>
            <div class="hora-formulario">@DateTime.Now.ToString("hh:mm")</div>
        </div>
    </div>
    <div class="container-btn-voltar-proxima">
        @if (this.Context?.StepsContext?.CurrentStep > 0)
        {
            <button type="submit" class="btn-voltar" @onclick="Context.StepsContext.Backward"></button>
        }
        <button type="submit" @onclick="OnSubmitBtnCLicked" class="btn-proxima">
            @(Context?.StepsContext?.MaxSteps == 1 || Context?.StepsContext?.CurrentStep == Context?.StepsContext?.MaxSteps ? "Salvar e Finalizar" : "Próximo")
        </button>
    </div>
</div>*@

@code {
    [Parameter] public Action Backward { get; set; } = null!;

    [Parameter] public bool HideNavigationButtons { get; set; }
    [Parameter] public string NextNavButtonText { get; set; } = null!;

    [Inject] HttpClient _http { get; set; }

    [Inject] IJSRuntime jsRuntime { get; set; }

    static UserDTO _user { get; set; } = null!;

    [CascadingParameter] ModalContext Context { get; set; }

    [Inject] UserCurrentAccessSelectedDTO loggedUser { get; set; }

    public async Task RefreshMe() { await InvokeAsync(this.StateHasChanged); }

    async Task OnSubmitBtnCLicked()
    {
        //Context.StepsContext.Forward();
        await this.jsRuntime.InvokeVoidAsync("clickMe", new object[] { "formButtonSubmit" });
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (Context != null && Context.RefreshFooterLayoutContent == null)
        {
            Context.RefreshFooterLayoutContent = RefreshMe;
        }

        if (firstRender)
        {
            if (loggedUser != null)
            {
                _user = loggedUser.User;
                this.StateHasChanged();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}
