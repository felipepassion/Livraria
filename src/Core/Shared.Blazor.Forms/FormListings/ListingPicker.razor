@using System.Reflection;
@using Niu.Nutri.Core.Application.DTO.Attributes;
@using Niu.Nutri.Core.Application.DTO.Aggregates.CommonAgg.Models;
@using Niu.Nutri.CrossCuting.Infra.Utils.Extensions
@using Niu.Nutri.Shared.Blazor.Components.Layout.DefaultDesign

@typeparam T where T : EntityDTO, new()
@typeparam TListining where TListining: EntityDTO, new()

<div class="container-informations">
    <div class="container-title-category">
        <div class="container-section-one">
            <img class="divider" src="/imgs/components/mini-listining/divider-2@2x.svg" alt="divider" />
            <div class="container-title-section">
                @* <div class="title">
                    <div class="agenda valign-text-middle inter-semi-bold-silver-chalice-10px">Agenda</div>
                </div> *@
                <div class="title"><div class="convnios valign-text-middle inter-semi-bold-black-16px">@Title</div></div>
            </div>
        </div>
    </div>
    <div class="frame-691">
        <div class="container-results">
            <CascadingValue Value="this.Context">
                <ListingPickerItem T="T" TListining="TListining" @bind-Model="@Model" @ref="_listiningLayuout" />
            </CascadingValue>
        </div>
        <img class="frame-690" src="/imgs/components/mini-listining/frame-690@1x.svg" alt="Frame 690" />
    </div>
</div>

@code {
    [Parameter] public int? Page { get; set; }
    [Parameter] public int? Size { get; set; } = 10000;
    [Parameter] public string Title { get; set; }
    [Parameter] public List<T> Model { get; set; }
    [Parameter] public EventCallback<List<T>> ModelChanged { get; set; }
    [Parameter] public string OrderBy { get; set; }
    [Parameter] public bool? OrderByDesc { get; set; }
    [Parameter] public bool MultipleSelect { get; set; }
    [Parameter] public string AdditionalQueryString { get; set; }

    [Inject] HttpClient _http { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }

    string searchText = "";
    IListiningContext Context;
    ListingPickerItem<T,TListining>? _listiningLayuout;

    void OnUpdated()
    {
        Context.QueryString = this.AdditionalQueryString;
        _listiningLayuout.UpdateListining();
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Context == null)
        {
            var _properties = new TListining().ExtractPropertyInfos("DisplayOnList")?
                .OrderBy(x => x.info?.GetCustomAttribute<DisplayOnList>()?.Order);

            Context = new ListiningContext(
                _navigationManager,
                Title,
                0,
                _properties,
                _listiningLayuout.RefreshListining,
                AdditionalQueryString,
                Page,
                Size,
                OrderBy,
                orderByDescending: OrderByDesc);

            //_listiningLayuout.RefreshListining();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}