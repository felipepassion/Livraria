@using System.Reflection
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Http
@using Core.Application.DTO.Attributes
@using Niu.Nutri.Core.Application.DTO.Extensions
@using Niu.Nutri.CrossCuting.Infra.Utils.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@using Core.Application.DTO.Aggregates.CommonAgg.Models
@using Niu.Nutri.Shared.Blazor.Forms.Templates.RegisterStepsTemplate
@using Niu.Nutri.SystemSettings.Application.DTO.Aggregates.SystemSettingsAgg.Requests
@using Users.Application.DTO.Aggregates.UsersAgg.Requests
@using Niu.Nutri.Shared.Blazor.Components.Layout.DefaultDesign
@using Niu.Nutri.Core.Application.DTO.Http.Models.CommonAgg.Commands.Responses

@inherits DefaultListiningBase

@inject IJSRuntime JSRuntime

@typeparam T where T : EntityDTO, new()

<div class="container-conteudo-secao-principal">
    @if (Context != null)
    {
        <ListiningHeader Context="Context" RedirectNewRegisterAsPage=RedirectNewRegisterAsPage HideNewRegisterButton=this.HideNewRegisterButton Title="@Title" T="T" />
        <ListiningItem Context="Context" HideActiveColumn=HideActiveColumn @ref="_listiningLayuout" T="T" />
    }
    else
    {
        <Loading />
    }
</div>

@if (Context != null)
{
    <CadastroModal HideNavigationButtons=HideNavigationButtonsOnRegisterModal @ref=Context.RegisterModal />
}

@code
{
    [Parameter] public string AdditionalQueryString { get; set; }
    [Parameter] public string OrderBy { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public int? Page { get; set; }
    [Parameter] public int? Size { get; set; }
    [Parameter] public bool? OrderByDesc { get; set; } = true;
    [Parameter] public bool OpenNewPageOnRegisterButtonClicked { get; set; }
    [Parameter] public bool HideNewRegisterButton { get; set; }
    [Parameter] public bool RedirectNewRegisterAsPage { get; set; }
    [Parameter] public bool HideNavigationButtonsOnRegisterModal { get; set; }
    [Parameter] public bool HideActiveColumn { get; set; }

    IListiningContext Context;
    [Inject] HttpClient _http { get; set; }
    [Inject] NavigationManager _navigationManager { get; set; }
    ListiningItem<T>? _listiningLayuout;

    [Inject] public UserCurrentAccessSelectedDTO CachedUserSession { get; set; }
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    protected async override Task OnInitializedAsync()
    {
        if (Context is null && this.AuthenticationStateTask is not null)
        {
            var authState = await AuthenticationStateTask;
            var user = authState.User;
            var myId = user.GetUserId();// user.GetUserId();

            var myRoute = new T().GetMyTypeName();
            var route = $"{new SystemPanelDTO().GetRoute()}/{myRoute}/access/{CachedUserSession.SelectedPage?.SystemPanelId}/{CachedUserSession.SelectedPage?.Id}";
            // this.CachedUserSession.AccessOfThisPage = (await _http.GetFromJsonAsync<GetHttpResponseDTO<UserProfileAccessDTO>>
            //     (route))?.Data ?? new UserProfileAccessDTO();

            if (Context == null || Context.QueryString != AdditionalQueryString)
            {
                var totalOfItens = await _http.CountAsync<T>(query: AdditionalQueryString);

                var properties = new T().ExtractPropertyInfos("DisplayOnList")?
                    .OrderBy(x => x.info?.GetCustomAttribute<DisplayOnList>()?.Order);

                Context = new ListiningContext(
                    _navigationManager,
                    Title,
                    totalOfItens.Data,
                    properties,
                    async () => { /*todo: add new IoC refresher*/ },
                    AdditionalQueryString,
                    Page,
                    Size,
                    OrderBy,
                    orderByDescending: OrderByDesc,
                     OpenNewPageOnRegisterButtonClicked);

                //await base.OnAfterRenderAsync(firstRender);
                await base.OnInitializedAsync();
            }
        }
    }
}