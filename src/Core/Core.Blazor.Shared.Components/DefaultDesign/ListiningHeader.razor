@using Niu.Living.Core.Application.DTO.Aggregates.CommonAgg.Commands.Responses;
@using Niu.Living.Core.Application.DTO.Aggregates.CommonAgg.Models;
@using Niu.Living.Users.Application.DTO.Aggregates.UsersAgg.Requests;

@inject NavigationManager Navigation

@typeparam T where T : Niu.Living.Core.Application.DTO.Aggregates.CommonAgg.Models.EntityDTO, new()

<div class="container-header-paginas-aplicacao">
    <div class="container-titulos-paginas-aplicacao">
        <h1 class="titulo-pagina">@((Title ?? new T().H1))</h1>
    </div>

    <div class="container-filtro-tabela">
        @*<OrderByListButton T="T" />*@
    </div>

    @if (!HideNewRegisterButton)
    {
        <div class="container-btn-novo-cadastro">
            <a class="btn-novo-cadastro" href="javascript:void(0)" @onclick="OnNewRegisterClicked">
                <span class="titulo-btn-novo-cadastro">+ Add New</span>
            </a>
        </div>
    }
</div>

@code {

    [Parameter] public bool RedirectNewRegisterAsPage { get; set; }
    [Parameter] public bool HideNewRegisterButton { get; set; }
    [Parameter] public IListiningContext Context { get; set; }
    [Parameter] public string Title { get; set; }
    [Inject] public UserCurrentAccessSelectedDTO CachedUserSession { get; set; }
    [Inject] HttpClient _http { get; set; }

    bool _initialized = false;

    void OnNewRegisterClicked()
    {
        if (RedirectNewRegisterAsPage)
            Navigation.NavigateTo(new T().GetRegisterPageRoute());
        else
            Context.OpenRegisterModal<T>();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_initialized && this.CachedUserSession?.SelectedPage != null)
        {
            _initialized = true;
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}