

<# if (entities.Any()) {#>
<# foreach(var namespaces in groupEntities) { 
var myNamespace = namespaces.Key.Replace("Entities","Requests").Replace("Domain","Application.DTO");
#>

<# foreach(var entity in namespaces) { 
var otherNamespace = entity.Namespace.FullName.Replace("Domain","Application.DTO");
var isAggregateRoot = GetAttributes(entity, true).Contains("[AggregateSettingsT4]");
var tType = MyParentTType(entity);
var parentTypeStr = tType?.Key.Replace("Entities","Requests").Replace("Domain","Application.DTO");
var myParent = MyParent(entity);

if(myParent != null){
	myParent = ": " +  $"{myParent}DTO";
}
else{
	myParent = "";
}

var myClassAttrs = GetAttributes(entity).Where(x=>x.StartsWith("[H") || x.Contains("Hide"));
foreach(var myAttr in myClassAttrs) {#> <#=myAttr#> <# } #>

using System.ComponentModel.DataAnnotations;
using System.ComponentModel;

namespace <#= myNamespace #>;

using Core.Application.DTO.Aggregates.CommonAgg.Models;
using Core.Application.DTO.Attributes;

public partial class <#= entity.Name #>DTO <#= myParent #><#=string.IsNullOrWhiteSpace(parentTypeStr)?"":$"<{parentTypeStr}DTO>"#>
	{
<#if(tType.HasValue)
{
foreach(var prop in MyAbstractProperties(tType.Value.Value))
{#>
		<#= WriteProperty(prop, true) #>
<#}
}
foreach(var property in GetProperties(entity, includeBase: false))
{
	if(isAggregateRoot && property.Key.Contains("AutoSaveSettings")) continue;
	var name = property.Key.Replace("[]", string.Empty);
    if(name.Equals("Id")) continue;
	if(ContainsAttribute(property.Value, "IgnorePropertyT4OnRequest") || ContainsAttribute(property.Value, "IgnorePropertyT4")) continue;
if(!string.IsNullOrWhiteSpace(property.Value.DocComment))
{#>
		<#= WritePropertySummary(property.Value) #>
<# } #>
	    <#= WriteProperty(property, property.Value.Getter.MustImplement == true, AggName: AggName) #>
<# } #>
	}
<# SaveOutputToSubFolder(
folderName: $"Aggregates/{AggName}/Requests", 
outputFileName: @$"{entity.Name}DTO.cs", 
recreateFileIfExists: true); #>
<# } #>
<# } #>
<# } #>