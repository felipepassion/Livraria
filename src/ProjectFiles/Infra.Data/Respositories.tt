<# if (entities.Any()) {
var className = GetDefaultNamespace().Replace(".","");
var contextName = AggName + "Context";
var path = Path.GetDirectoryName(project.FullName);
   var repositories = Directory.GetFiles(path, "*Repository.cs", SearchOption.AllDirectories).Select(p => Path.GetFileNameWithoutExtension(p));
   foreach(var namespaces in entities.GroupBy(p => p.Namespace.FullName)) {
var isFromSameAgg = AggName == namespaces.Key.Split('.').FirstOrDefault(x=>x.EndsWith("Agg"));
foreach (var entity in namespaces) { #>
namespace <#= namespaces.Key.Replace("Entities", "Repositories").Replace("Domain", "Infra.Data") #>;

using Core.Infra.Data.Repositories;
using Context;
using Domain.Aggregates.<#= AggName #>.Entities;
using <#= namespaces.Key.Replace("Entities", "Repositories") #>;

<#var exists = false;
   foreach (var repo in repositories) {
		if (repo.Equals($"I{entity.Name}Repository", StringComparison.CurrentCultureIgnoreCase)) {
			exists = true;
			break;
		}
   } 
   if (exists) continue; #>
	public partial class <#= entity.Name #>Repository : Repository<<#= entity.Name #>>, I<#= entity.Name #>Repository { public <#= entity.Name #>Repository(<#= contextName #> ctx) : base(ctx) { } }

<# SaveOutputToSubFolder(
    folderName: $@"Aggregates\{AggName}\Repositories", 
    outputFileName: @$"{entity.Name}Repository.cs", 
    recreateFileIfExists: true); #>
<# } #>
<# } #>
<# } #>
