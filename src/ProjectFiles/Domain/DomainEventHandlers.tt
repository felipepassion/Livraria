<# if (entitiesT4.Count() > 0){#>
<# } #>

<#foreach(var entity in entitiesT4){#>
namespace <#= GetDefaultNamespace() #>.<#= project.Name #>.Aggregates.<#= AggName #>.Events.Handlers;

using MediatR;
using CrossCutting.Infra.Log.Providers;
using Core.Domain.Aggregates.CommonAgg.Events.Handles;

public partial class <#= entity.Name #>EventHandler : BaseEventHandler,
    INotificationHandler<<#= entity.Name #>CreatedEvent>,
    INotificationHandler<<#= entity.Name #>DeletedEvent>,
    INotificationHandler<<#= entity.Name #>UpdatedEvent>,
    INotificationHandler<<#= entity.Name #>ActivatedEvent>,
    INotificationHandler<<#= entity.Name #>DeactivatedEvent>{
    public <#= entity.Name #>EventHandler(ILogProvider logProvider, IServiceProvider serviceProvider):base(logProvider, serviceProvider){}
    public async Task Handle(<#= entity.Name #>CreatedEvent notification, CancellationToken cancellationToken){PublishLog(notification);}
    public async Task Handle(<#= entity.Name #>DeletedEvent notification, CancellationToken cancellationToken){PublishLog(notification);}
    public async Task Handle(<#= entity.Name #>ActivatedEvent notification, CancellationToken cancellationToken){PublishLog(notification);}
    public async Task Handle(<#= entity.Name #>UpdatedEvent notification, CancellationToken cancellationToken){PublishLog(notification);}
    public async Task Handle(<#= entity.Name #>DeactivatedEvent notification, CancellationToken cancellationToken){PublishLog(notification);}
}
<# SaveOutputToSubFolder(
    folderName: $@"Aggregates\{AggName}\Events\Handlers", 
    outputFileName: @$"{entity.Name}EventHandler.cs", 
    recreateFileIfExists: true); #>
<# } #>