<# if (entities.Any()) {
#>


<#foreach(var namespaces in groupEntities) {
	var aggName = namespaces.Key.Split('.').FirstOrDefault(x=>x.EndsWith("Agg"));
	var isFromSameAgg = AggName == namespaces.Key.Split('.').FirstOrDefault(x=>x.EndsWith("Agg"));
foreach(var entity in namespaces) {
	var responseName = $"{entity.Name}DTO";
	var className = entity.Name + "AppService";
	var props = GetProperties(entity);
#>
using MediatR;
using System.Linq.Expressions;

namespace <#= namespaces.Key.Replace("Entities", "AppServices").Replace("Domain","Application") #>;
	using Core.Application.DTO.Http.Models.CommonAgg.Commands.Responses;
	using CrossCuting.Infra.Utils.Extensions;
	using Application.DTO.Aggregates.<#= aggName #>.Requests;
	using Domain.Aggregates.<#= aggName #>.Queries.Models;
	using Domain.Aggregates.<#= aggName #>.Repositories;
	using Domain.Aggregates.<#= aggName #>.Filters;
	using Domain.Aggregates.<#= aggName #>.Entities;
	using Domain.Aggregates.<#= aggName #>.CommandModels;
	using Core.Application.DTO.Extensions;
	using Core.Application.Aggregates.Common;

	public partial class <#= className #> : BaseAppService, I<#= className #> {	
<#
	var repoTypeName = $"I{entity.Name}Repository";
	var repoVarName = $"_{ToCamelCase(entity.Name)}Repository";
	var attrs = GetAttributesDict(entity)["EndpointsT4"];
	var canSummary = attrs.Any(x=>x.Value.Contains("HttpListining") || x.Value.Contains("All"));
	var canCreate = attrs.Any(x=>x.Value.Contains("HttpPost") || x.Value.Contains("All"));
#>
		public <#= repoTypeName #> <#= repoVarName #>;
		public <#= className #>(IMediator mediator, Niu.Nutri.CrossCutting.Infra.Log.Contexts.ILogRequestContext ctx, <#= repoTypeName #> <#= repoVarName.Substring(1) #>) : base(ctx, mediator) { <#= repoVarName #> = <#= repoVarName.Substring(1) #>; }	
		public async Task<<#= responseName #>> Get(<#=entity.Name#>QueryModel request) {
            return (await <#= repoVarName #>.FindAsync(filter: <#=entity.Name#>Filters.GetFilters(request, isOrSpecification: request.IsOrSpecification), selector: x => x.ProjectedAs<<#= responseName #>>()));
        }
		public void Dispose()
        {
			<#=repoVarName#> = null;
        }
		public async Task<IEnumerable<T>> GetAll<T>(<#=entity.Name#>QueryModel request, int? page = null, int? size = null, Expression<Func<<#= entity.Name #>, T>> selector = null) {
			return await <#= repoVarName #>.SelectAllAsync(
                filter: <#=entity.Name#>Filters.GetFilters(request, isOrSpecification: request.IsOrSpecification),
                take: size,
                skip: page * size,
				ascending: request.OrderByDesc != true,
                orderBy: request.OrderBy.GetPropertyListSelector<<#= entity.Name #>>(),
                selector: selector);
		}
		public async Task<T> Select<T>(<#=entity.Name#>QueryModel request, Expression<Func<<#= entity.Name #>, T>> selector = null)
        {
            return (await <#= repoVarName #>.FindAsync(filter: <#=entity.Name#>Filters.GetFilters(request, isOrSpecification: true), selector: selector));
        }
        public async Task<IEnumerable<<#= responseName #>>> GetAll(<#=entity.Name#>QueryModel request, int? page = null, int? size = null) {
            return await <#= repoVarName #>.FindAllAsync(
                filter: <#=entity.Name#>Filters.GetFilters(request, isOrSpecification: true),
                take: size,
                skip: page * size,
				ascending: request.OrderByDesc != true,
                orderBy: request.OrderBy.GetPropertyListSelector<<#= entity.Name #>>(),
                selector: x => x.ProjectedAs<<#= responseName #>>());
        }

<#if(canCreate){#>
		public Task<DomainResponse> Create(<#= entity.Name #>DTO request, bool updateIfExists = true, <#=entity.Name#>QueryModel searchQuery = null) { return _mediator.Send(new Create<#=entity.Name#>Command(_logRequestContext, request)); }
<#}#>
		public async Task<int> CountAsync(<#=entity.Name#>QueryModel request) { return await <#= repoVarName #>.CountAsync(filter: <#=entity.Name#>Filters.GetFilters(request, isOrSpecification: true)); }
<#
if(canCreate)
{
var DTOName = $"{entity.Name}QueryModel";
#>
		public Task Update(<#=entity.Name#>QueryModel searchQuery, <#= entity.Name #>DTO request, bool createIfNotExists = true) { return _mediator.Send(new Update<#=entity.Name#>Command(_logRequestContext, searchQuery, request)); }
		public Task<DomainResponse> DeleteRange(<#=entity.Name#>QueryModel request){ return _mediator.Send(new DeleteRange<#=entity.Name#>Command(_logRequestContext, request)); }
		public Task<DomainResponse> Delete(<#=entity.Name#>QueryModel request){ return _mediator.Send(new Delete<#=entity.Name#>Command(_logRequestContext, request)); }
<# } #>
	}
<# SaveOutputToSubFolder(
    folderName: $"Services", 
    outputFileName: @$"{entity.Name}AppServices.cs", 
    recreateFileIfExists: true); #>
<# } #>
<# } #><# } #>