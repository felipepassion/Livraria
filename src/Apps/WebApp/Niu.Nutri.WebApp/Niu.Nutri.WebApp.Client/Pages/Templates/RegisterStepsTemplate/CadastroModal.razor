@using Niu.Nutri.Shared.Blazor.Components.Modal
@using Niu.Nutri.Core.Application.DTO.Aggregates.CommonAgg.Models
@using Niu.Nutri.Shared.Blazor.Forms.Templates.RegisterStepsTemplate.Contexts

@inherits BaseFormModal

@if (IsOpen)
{
    <div class="modal-popup" id="modal_@MyId" tabindex="0" style="@Style">
        <div class="corpo-modal">
            <CascadingValue Value=this>
                <CascadingValue Value="this.ModalContext">
                    @if (ChildFragment == null)
                    {
                        <Loading />
                    }
                    else
                    {
                        <div class="header-modal">
                            <div class="btn-closemodal close-modal_@MyId">
                                <div>
                                    @if (this.ModalContext?.StepsContext?.CurrentStep > 0)
                                    {
                                        <img src="icons/popup/arrow-left.svg"
                                             @attributes="iconBtnFechar"
                                             @onclick=ModalContext.StepsContext.Backward></img>
                                    }
                                </div>
                                <div>
                                    <img src="icons/popup/close.svg"
                                         id="btn-close"
                                         @attributes="iconBtnFechar"
                                         @onclick=Close></img>
                                </div>
                            </div>
                        </div>

                        @if (!string.IsNullOrWhiteSpace(ModalContext?.ModalTitle))
                        {
                            <div class="modal-title">
                                <span class="title-modal">@ModalContext.ModalTitle</span>
                            </div>
                        }

                        <div class="body-modal">
                            @ChildFragment
                        </div>

                        <div class="footer-modal">
                            <StepsNextAndBackButtons HideNavigationButtons=HideNavigationButtons @ref=this.NextAndBackButtonsContainer />
                            <a style="display:none" id="btn_@MyId" href="#modal_@MyId">Abrir Modal</a>
                        </div>
                    }

                </CascadingValue>
            </CascadingValue>
        </div>
    </div>
}

@code {
    Guid? guid;

    bool needRefreshOtherComponents;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    public void RefreshChildFragment(RenderFragment body)
    {
        //this.ChildFragment = body;
        //Task.Run(this.StateHasChanged);
    }

    public override void Close()
    {
        //this.ModalContext.Model = null;
        this.ChildFragment = null;
        this.ModalContext.StepsContext = null;
        this.ModalContext.Model = null;
        this.ModalContext.OnFormSubmited = null;
        this.NextAndBackButtonsContainer?.RefreshMe();
        base.Close();
    }

    public override void InitializeModel(IEntityDTO model, StepsContext stepsContext)
    {
        base.InitializeModel(model, stepsContext);
    }
}
