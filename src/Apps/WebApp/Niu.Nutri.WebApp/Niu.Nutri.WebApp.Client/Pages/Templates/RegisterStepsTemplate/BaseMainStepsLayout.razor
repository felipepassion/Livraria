@using Microsoft.AspNetCore.Components.Forms
@using Niu.Nutri.Shared.Blazor.Components.Modal
@using Niu.Nutri.Core.Application.DTO.Aggregates.CommonAgg.Models
@using Niu.Nutri.Core.Application.DTO.Aggregates.CommonAgg.Validators
@using Niu.Nutri.Shared.Blazor.Forms.Modal
@using Niu.Nutri.Shared.Blazor.Forms.Templates.RegisterStepsTemplate.Contexts

@layout CadastroModal
@typeparam ModelType where ModelType : EntityDTO, new()

@if (this.EditContext != null)
{
    <EditForm style="width:100%" class="container-formulario" EditContext="this.EditContext" @ref=myForm>
        @if (Context != null)
        {
            <FormFluentValidator @ref=Context.Validator
            EditContext="this.EditContext"
            Validator="this.TValidator"
            OnValidSubmit="OnSubmitForm"
            OnInvalidSubmit="OnSubmitFormInvalid" />
        }
        <div class="container-corpo-formulario">
            <div class="tela-cadastro-primeira-secao screen">
                <CascadingValue Value="Context">
                    <CascadingValue Value="TValidator">
                        <div class="container-corpo-formulario">
                            @*<HeaderButtonActions ModelType="ModelType" />*@
                            @if (CurrentFragment != null)
                            {
                                @CurrentFragment
                            }
                            else
                            {
                                <Loading />
                            }
                        </div>
                    </CascadingValue>
                </CascadingValue>
            </div>
        </div>
        <button type="submit" class="submit" style="display:none">Test Submit</button>
    </EditForm>
}
else
{
    <Loading />
}
@if(Context != null)
{
    <WarningModal @ref=Context.ErrorModal />
}

@code {
    public void RefreshHeader(Action callback = null)
    {
        //if (callback != null) callback();
        //this.rightContainer?.RefreshMe();
        //this.header?.RefreshMe();
    }

    EditForm myForm { get; set; }

    FormFluentValidator validator;

    [Parameter] public StepsContext Context { get; set; }
    [Parameter] public IBaseFormPagina Modal { get; set; }

    [Parameter] public EditContext EditContext { get; set; }
    [Parameter] public bool EnableRightContainer { get; set; }
    [Parameter] public RenderFragment CurrentFragment { get; set; }
    [Parameter] public Func<EditContext, Task> OnSubmitForm { get; set; }
    [Parameter] public FluentValidation.IValidator TValidator { get; set; }
    [Parameter] public BaseAggregateSettingsDTO AutoSaveSettings { get; set; }
    [Parameter] public Func<EditContext, Task> OnSubmitFormInvalid { get; set; }
}