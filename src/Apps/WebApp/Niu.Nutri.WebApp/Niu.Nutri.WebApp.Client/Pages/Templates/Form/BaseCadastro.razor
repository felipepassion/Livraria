@using Microsoft.JSInterop
@using Niu.Nutri.Core.Application.DTO.Extensions
@using Niu.Nutri.Core.Application.DTO.Seedwork.ValueObjects
@using Niu.Nutri.Shared.Blazor.Forms.Templates.RegisterStepsTemplate.Contexts
@using Core.Application.DTO.Aggregates.CommonAgg.Models;
@using Core.Application.DTO.Aggregates.CommonAgg.ValueObjects;
@using Niu.Nutri.WebApp.Client.Pages.Templates.RegisterStepsTemplate

@typeparam T where T : SteppableEntityDTO, new()

@code {
    [Inject] IJSRuntime _js { get; set; }
    [Inject] protected HttpClient _http { get; set; }

    [Parameter] public T Model { get; set; }

    [Parameter] public StepsContext StepsContext { get; set; }
    [Inject] AutoSaveSettingsDTO AutoSave { get; set; }
    [Parameter] public ModalContext CadastroModalContext { get; set; }
    [Parameter] public BaseMainStepsLayout<T> layout { get; set; }

    public bool isDebouncing = false; // variável de controle

    public async Task OnFormUpdated()
    {
        await OnFormUpdated(null);
    }

    public async Task OnFormUpdated(Action? updateFieldAction = null)
    {
        if (updateFieldAction != null) updateFieldAction();

        if (isDebouncing || CadastroModalContext.IsAutoSaving)
        {
            return;
        }
        isDebouncing = true; // começa o debouncing
        await Task.Delay(2000); // espera 300ms

        if (Model?.IsCreated == true)
        {
            await OnAutoSaveTriggered();
        }

        await StepsContext.UpdateHeaderAction();
        //CadastroModalContext.HeaderLayoutContent.ref

        isDebouncing = false; // termina o debouncing
    }

    protected async Task OnAutoSaveTriggered()
    {
        if (!this.CadastroModalContext.IsAutoSaving && AutoSave.Enabled && !this.CadastroModalContext.IsSubmiting)
        {
            if (!Model.IsCreated || Model.CurrentStep == 0)
            {
                Model.ChangeStep(1);
            }
            if (await this.StepsContext.ValidateModel2())
            {
                this.CadastroModalContext.IsAutoSaving = true;
                var result = await _http.CreateAsync<T>(this.Model);
                if (result.Success)
                {
                    if (!Model.IsCreated)
                        this.Model.Created(result.Data?.Data);
                    try
                    {
                        if (StepsContext.PaginationLayoutRefresh != null)
                            await this.StepsContext.PaginationLayoutRefresh.Invoke()!;
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
            this.CadastroModalContext.IsAutoSaving = false;
        }
    }

    protected override Task OnInitializedAsync()
    {
        if (this.CadastroModalContext != null)
        {
            if (this.CadastroModalContext.Metadata.ContainsKey("UpdateModel"))
                this.CadastroModalContext.Metadata.Remove("UpdateModel");

            this.CadastroModalContext.Metadata.TryAdd("UpdateModel", (object)this.UpdateModel!);
            this.CadastroModalContext.Metadata.TryAdd("RefreshLayout", (object)(() => this.OnFormUpdated()));
        }

        this.AutoSave.TriggerAutoSave = this.OnAutoSaveTriggered;

        return base.OnInitializedAsync();
    }

    async Task UpdateModel(T newObjVal, bool needTriggerAutoSave, Action callback)
    {
        this.Model = newObjVal;
        await this.OnFormUpdated(callback);
        if (needTriggerAutoSave) await OnAutoSaveTriggered();
        this.StateHasChanged();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.StateHasChanged();
        }
        return base.OnAfterRenderAsync(firstRender);
    }
}
