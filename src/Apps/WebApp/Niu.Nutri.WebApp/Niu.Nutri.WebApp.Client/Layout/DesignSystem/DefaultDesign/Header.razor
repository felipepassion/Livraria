@using Niu.Nutri.Shared.Blazor.Components.Services
@using Niu.Nutri.Users.Application.DTO.Aggregates.UsersAgg.Requests
@using Niu.Nutri.WebApp.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authorization
@using Niu.Nutri.WebApp.Client.Services.Auth

@inject IAuthorizeApi authorizeApi
@inject ThemeManager ThemeManager
@inject NavigationManager NavigationManager

<header class="header">
    <div class="header__container">

        <img class="header__logo" src="/Images/Logos/niutech-logo.svg" />

        <div class="header__links">
            @* <SwitchInput Value="@IsDarkTheme"></SwitchInput> *@
            <SwitchInput @bind-Value="@IsDarkTheme" @bind-Value:after="ChangeTheme"></SwitchInput>
            <AuthorizeView>
                <Authorized>
                    <div class="header__profile">
                        <div class="header__profile-avatar"></div>
                        <h1 class="header__profile-name">@LoggedUserInfo?.User?.Name</h1>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <DefaultButton>
                        <ChildContent>
                            <a href="/login">Entrar</a>
                        </ChildContent>
                    </DefaultButton>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</header>

@code {
    [Inject] UserCurrentAccessSelectedDTO LoggedUserInfo { get; set; } = default!;

    [Inject] IJSRuntime IJSRuntime { get; set; } = default!;
    bool IsDarkTheme { get; set; } = false;

    [Parameter] public required Action OnChangeTheme { get; set; }

    private async Task ChangeTheme()
    {
        string themeName = IsDarkTheme ? "dark-theme" : "light-theme";
        Console.WriteLine(themeName);
        await ThemeManager.SetThemeAsync(themeName, IJSRuntime);
        OnChangeTheme();
    }
    private async Task OnThemeSwitchChanged()
    {
        await OnThemeSwitchChanged(false);
    }
    private async Task OnThemeSwitchChanged(bool? value)
    {
        if (value.HasValue)
        {
            IsDarkTheme = value.Value;
            await ChangeTheme();
        }
    }

    private async Task Logout()
    {
        var result = await this.authorizeApi.Logout();

        if (result.Success) NavigationManager.NavigateTo("/login", true); return;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.ThemeManager.CurrentTheme = (await ThemeManager.GetThemeAsync(this.IJSRuntime));
            this.StateHasChanged();
            OnChangeTheme();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task RefreshMe() => await this.InvokeAsync(this.StateHasChanged);
}
