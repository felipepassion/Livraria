@using Niu.Nutri.Core.Application.DTO.Extensions
@using Niu.Nutri.Core.Application.DTO.Http.Models.CommonAgg.Commands.Responses
@using Niu.Nutri.CrossCuting.Infra.Utils.Extensions
@using Niu.Nutri.Shared.Blazor.Components.Services
@using Niu.Nutri.Users.Application.DTO.Aggregates.UsersAgg.Requests
@using Niu.Nutri.WebApp.Client.Layout.DesignSystem.DefaultDesign

@inherits LayoutComponentBase

@inject ThemeManager ThemeManager
@inject NavigationManager navigationManager

<div class="page @(ThemeManager.CurrentTheme)">
    <main>
        <div class="content">
            @Body
        </div>
        <Footer @ref=_footerComponent />
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    Header _Header { get; set; } = default!;
    Footer _footerComponent { get; set; } = default!;

    [Inject] HttpClient _http { get; set; } = default!;
    [Inject] UserCurrentAccessSelectedDTO CachedUserSession { get; set; } = default!;

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;

    bool? IsReady;
    bool initialized = false;

    protected async override Task OnParametersSetAsync()
    {
        if (_footerComponent != null)
            await this._footerComponent.RefreshMe();
        await base.OnParametersSetAsync();
    }

    protected async override Task OnInitializedAsync()
    {
        if (CachedUserSession?.User == null)
        {
            var authState = await authenticationStateTask;
            var user = authState.User;
            var me = (await _http.GetFromJsonAsync<GetHttpResponseDTO<UserDTO>>($"api/user?IdEqual={user.GetUserId()}"))?.Data;

            // if (me?.NeedResetPassword != false)
            // {
            //     navigationManager.NavigateTo("/login/criar-senha");
            //     return;
            // }

            var existingAccess = (await _http.SearchAsync<UserCurrentAccessSelectedDTO>($"IdEqual={user.GetUserId()}")).Data.FirstOrDefault();
            if (existingAccess != null)
            {
                CachedUserSession.Update(existingAccess);
                CachedUserSession.User = me;
                if (existingAccess.UserProfileId.HasValue)
                    CachedUserSession.UserProfile = (await _http.SearchAsync<UserProfileDTO>($"IdEqual={existingAccess.UserProfileId}"))
                        .Data.FirstOrDefault();
            }
            else
            {
                CachedUserSession.Update(me.SelectedAccess);
            }

            CachedUserSession.UserProfile = me.SelectedAccess?.UserProfile;
            var isAnyUserProfileSelected = CachedUserSession.UserProfileId.HasValue;

            IsReady = isAnyUserProfileSelected;

            this.StateHasChanged();

            if (_Header != null)
                await _Header.RefreshMe();
        }
        else if (!initialized)
        {
            this.initialized = true;
            this.StateHasChanged();
        }

        await base.OnInitializedAsync();
    }

    async Task CloseModal()
    {
        IsReady = true;
        await _Header.RefreshMe();
        this.StateHasChanged();
    }
    void OnChangeAccessRequested()
    {
        IsReady = false;
        initialized = false;
        this.StateHasChanged();
    }
}