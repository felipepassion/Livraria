@using Niu.Nutri.Core.Application.DTO.Aggregates.CommonAgg.Models;
@using Niu.Nutri.Shared.Blazor.Forms.RightContainer
@using Niu.Nutri.SystemSettings.Application.DTO.Aggregates.SystemSettingsAgg.Requests;
@using Syncfusion.Blazor.Buttons

@typeparam T where T : SteppableEntityDTO

<div class="rightcontainer-header-accordeon-menu-system" @onclick=OnClick>
    <div class="titulos-rightcontainer-v2">
        <div class="quebra-linha-titulos-rightcontainer-v2">
            <div class="circle">
                <SfIcon IconCss="bi bi-menu-button-wide-fill"></SfIcon>
            </div>
            <div class="quebra-linha-titulos">
                <div class="circle">
                    <img class="icon-btn-permissao-perfil" src="/imgs/menus/1-adm-master/sidebar-closed/0-menu-adm/1-menu-adm-master.svg" />
                </div>
                <div class="grupo-titulos">
                    <div class="titulo-rightcontainer-v2">
                        @*@if (!string.IsNullOrEmpty(Model?.H1))
                        {
                            @(Model?.H1.Length > 20 ? Model?.H1.Substring(0, 20) + "..." : Model?.H1)
                        }*@
                    </div>
                    <div class="subtitulo-rightcontainer-v2">
                        @if (!string.IsNullOrEmpty(Description))
                        {
                            @* @(Description.Length > 20 ? Description.Substring(0, 20) + "..." : Description) *@
                            @(Description)
                        }
                       
                    </div>
                </div>
            </div>

            @*<div class="grupo-titulos-rightcontainer-v2">
                <div class="titulo-rightcontainer-v2">
                    @if (!string.IsNullOrEmpty(Model?.H1))
                    {
                        @(Model?.H1.Length > 20 ? Model?.H1.Substring(0, 20) + "..." : Model?.H1)
                    }
                </div>
                <div class="subtitulo-rightcontainer-v2">
                    @if (!string.IsNullOrEmpty(Description))
                    {
                        @(Description.Length > 20 ? Description.Substring(0, 20) + "..." : Description)
                    }
                </div>
            </div>*@
        </div>
    </div>

    <div class="rightcontainer-etapas-cadastro-btn-add-remover-menu-system">
        @if (Model?.Id.HasValue == true && ShowActionButtons)
        {
            @*<div class="rightcontainer-etapa-cadastro-menu-system">
        <SfIcon class="cadastro-completo-menu-system" IconCss="bi bi-check-circle-fill"></SfIcon>
        </div>*@
            if (!DisableAddButton)
            {
                <div class="rightcontainer-add-menu-system"
                     @onmouseover="()=>{ RightContext.IsMouseHoverPlusBtn = true; }"
                     @onmouseout="()=>{ RightContext.IsMouseHoverPlusBtn = false; }"
                     @onclick="OnCreatePanelClicked">
                    <SfIcon Name="IconName.Plus"></SfIcon>
                </div>
            }

            <div class="rightcontainer-remover-menu-system"
                 @onmouseover="()=>{ RightContext.IsMouseHoverTrashBtn = true; }"
                 @onmouseout="()=>{ RightContext.IsMouseHoverTrashBtn = false; }"
                 @onclick="async ()=> await OnDeletePanelClicked(Model)">
                <SfIcon Name="IconName.Trash"></SfIcon>
            </div>
        }
        @*else
        {
        <div class="rightcontainer-etapa-cadastro-menu-system">
        <i class="etapa-menu-system">@(Model?.CurrentStep + 1)</i>
        </div>
        }*@
    </div>
</div>

@code {
    [Parameter] public bool ShowActionButtons { get; set; } = true;
    [Parameter] public bool DisableAddButton { get; set; }

    [Parameter] public Func<Task> OnClick { get; set; }
    [Parameter] public T Model { get; set; }
    [Parameter] public Func<Task> OnCreatePanelClicked { get; set; }
    [Parameter] public Func<T, Task> OnDeletePanelClicked { get; set; }

    [Parameter] public GenericRightContainerContext RightContext { get; set; }
    [Parameter] public string Description { get; set; }
    [Parameter] public EventCallback<string> DescriptionChanged { get; set; }

    protected override Task OnInitializedAsync()
    {
        if (!RightContext.GroupRefreshActions.ContainsKey(Model.ExternalId))
            RightContext.GroupRefreshActions.Add(this.Model.ExternalId, this.StateHasChanged);

        return base.OnInitializedAsync();
    }
}
