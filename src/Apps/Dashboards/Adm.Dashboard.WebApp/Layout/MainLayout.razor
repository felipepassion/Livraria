@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using Niu.Nutri.Core.Application.DTO.Extensions
@using Niu.Nutri.CrossCuting.Infra.Utils.Extensions
@using Niu.Nutri.Shared.Blazor.Components.Modal
@using Niu.Nutri.Shared.Blazor.Sidebar.Menu
@using Niu.Nutri.Users.Application.DTO.Aggregates.UsersAgg.Requests;
@using Niu.Nutri.Users.Enumerations
@using UserCurrentAccessSelectedDTO = Niu.Nutri.Users.Application.DTO.Aggregates.UsersAgg.Requests.UserCurrentAccessSelectedDTO;

@inject NavigationManager navigationManager

<HeaderDisplay />

<section class="main-section page">
    @if (IsReady.HasValue)
    {
        @if (IsReady == true)
        {
            <NavMenu />
            <article class="main-content">
                @Body
            </article>
        }
        else
        {
            <SelectAccess />
        }
    }
    else
    {
        <p>Selecione seu acesso...</p>
    }
</section>

@code {
    HeaderDisplay HeaderDisplay { get; set; }
    [Inject] HttpClient _http { get; set; }
    [Inject] UserCurrentAccessSelectedDTO CachedUserSession { get; set; }
    private HubConnection hubConnection;

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    bool? IsReady;
    bool initialized = false;

    AnimatedModal _loginModal { get; set; }

    protected async override Task OnInitializedAsync()
    {
        {
            var authState = await authenticationStateTask;
            var user = authState.User;
            if (!string.IsNullOrWhiteSpace(user.GetUserId()))
            {
                _http.BaseAddress = new Uri(navigationManager.BaseUri);

                var me = (await _http.FindOneAsync<UserDTO>($"IdEqual={user.GetUserId()}"))?.Data;

                if (me == null)
                {
                    navigationManager.NavigateTo("/login/");
                    return;
                }
                if (me.NeedResetPassword == true)
                {
                    navigationManager.NavigateTo("/login/criar-senha");
                    return;
                }

                var existingAccess = ((await _http.SearchAsync<UserCurrentAccessSelectedDTO>($"IdEqual={user.GetUserId()}")))?.Data.FirstOrDefault();

                if (existingAccess != null)
                {
                    CachedUserSession.Update(existingAccess);
                    CachedUserSession.User = me;
                    if (existingAccess.UserProfileId.HasValue)
                        CachedUserSession.UserProfile = (await _http.SearchAsync<UserProfileDTO>($"IdEqual={existingAccess.UserProfileId}"))?.Data.FirstOrDefault();
                }
                else
                {
                    CachedUserSession.UserProfileId = me.SelectedAccess?.UserProfileId;
                    CachedUserSession.User = me;
                }

                //CachedUserSession.UserProfile= me.SelectedAccess.UserProfile;
                var isAnyUserProfileSelected = CachedUserSession.UserProfileId.HasValue;

                IsReady = isAnyUserProfileSelected;
            }
            else
            {
                IsReady = true;
            }
            initialized = true;
            this.StateHasChanged();
            //this.HeaderDisplay?.RefreshMe();
        }
        // else if (_loginModal != null && !initialized)
        //     {
        //         this.initialized = true;
        //         await _loginModal.Open();
        //         this.StateHasChanged();
        //     }

        await base.OnInitializedAsync();
    }

    async Task CloseModal()
    {
        IsReady = true;
        //_headerDisplay.RefreshMe();
        //this._loginModal.Close();
        await InvokeAsync(this.StateHasChanged);
    }

    async Task OnChangeAccessRequested()
    {
        IsReady = false;
        initialized = false;
        await InvokeAsync(this.StateHasChanged);
        //await this._loginModal.Open();
    }
}