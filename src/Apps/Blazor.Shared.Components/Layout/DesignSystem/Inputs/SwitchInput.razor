@using System.Diagnostics.CodeAnalysis
@typeparam T

@inherits InputBase<T>

<input type="checkbox" value="@Value" @bind="Value"
       @bind:after="@this.OnValueChanged" />

@code {
    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out T result, [NotNullWhen(false)] out string validationErrorMessage)
    {
        if (typeof(T) == typeof(bool))
        {
            result = (T)(object)(value?.ToLower() == "true");
            validationErrorMessage = null!;
            return true;
        }
        result = default!;
        validationErrorMessage = "The provided value is invalid.";
        return false;
    }

    private async Task OnValueChanged()
    {
        var inputValue = Value?.ToString() ?? string.Empty;

        if (typeof(T) == typeof(string))
        {
            // Se T for string, atribuir diretamente o valor input
            this.Value = (T)(object)inputValue;
        }
        else if (typeof(T) == typeof(bool) || typeof(T) == typeof(bool?))
        {
            // Tentativa de converter para int
            if (bool.TryParse(inputValue, out bool intValue))
            {
                this.Value = (T)(object)intValue;
            }
        }
        else
        {
            // Lidar com outros tipos conforme necessário
            // Exemplo: DateTime, bool, etc.
            // Implemente as conversões para outros tipos aqui
        }

        await ValueChanged.InvokeAsync(this.Value);

        this.StateHasChanged();
    }

}