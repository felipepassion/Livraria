
<AnimatedModal OnCloseModal="@OnCloseModal" @bind-Args="Args" @ref=MyModal>
    <ChildFragment>
        <div class="frame-802 screen @(this.InformationLevel.ToString().ToLower())">
            <div class="container-grupo-empresa-modal">
                <p class="esta-data-no-possui-agenda valign-text-middle">@(Title ?? "Alerta")</p>
                <p class="para-realizar-agenda">
                    @if (errors?.Any() == true)
                    {
                        <ul class="errors-list">
                            @foreach (var item in errors)
                            {
                                var message = RenderErrorMessage(item);
                                <li class="error-item">
                                    @{
                                        <span class='error-property-name'>
                                            @message.Item1
                                        </span>
                                        @message.Item2
                                    }
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        @Description
                    }
                </p>
            </div>
            <div class="container-buttons">
                @if (string.IsNullOrWhiteSpace(ButtonOkText) && string.IsNullOrWhiteSpace(ButtonCancelText))
                {
                    <div class="finalizar-e-salvar">
                        <div class="criar-agenda" @onclick="async () => { MyModal?.Close(); }">
                            OK
                        </div>
                    </div>
                }
                else
                {
                    <div class="cancelar" @onclick=OnBtnCancelClicked>@(ButtonCancelText ?? "Cancelar")</div>
                    <div class="finalizar-e-salvar">
                        <div class="criar-agenda" @onclick="OnBtnOkClicked">
                            @(ButtonOkText ?? "Salvar")
                        </div>
                    </div>
                }
            </div>
        </div>
    </ChildFragment>
</AnimatedModal>

@code {
    public AnimatedModal MyModal { get; set; }
    //[Parameter] public EventCallback<AnimatedModal> MyModalChanged { get; set; }
    [Parameter] public Action? OnCloseModal { get; set; }
    [Parameter] public object[] Args { get; set; }

    [Parameter] public string Title { get; set; }
    [Parameter] public string Description { get; set; }
    [Parameter] public string ButtonOkText { get; set; }
    [Parameter] public string ButtonCancelText { get; set; }

    [Parameter] public Func<AnimatedModal, object[], Task> OnButtonOkClick { get; set; }
    [Parameter] public Func<AnimatedModal, object[], Task> OnButtonCancelClick { get; set; }
    [Parameter] public WarningLevel InformationLevel { get; set; } = WarningLevel.Information;

    bool init = false;

    public Task Open(params object[] args) => MyModal?.Open(args);
    public void Close(bool invokeCallback = false) => MyModal.Close(invokeCallback);

    string[] errors;

    async Task OnBtnOkClicked()
    {
        MyModal?.Close();
        await OnButtonOkClick(MyModal, Args);
    }
    async Task OnBtnCancelClicked()
    {
        MyModal?.Close();
        if (OnButtonCancelClick != null)
            await OnButtonCancelClick(MyModal, Args);
    }

    public void PopUp(
        string title = null,
        string description = null,
        string buttonOkText = null,
        string buttonCancelText = null,
        Func<AnimatedModal, object[], Task> onButtonOkClick = null,
        Func<AnimatedModal, object[], Task> onButtonCancelClick = null,
        params object[] args)
    {
        this.InformationLevel = WarningLevel.Information;
        this.Title = title;
        this.errors = null;
        this.Description = description;
        this.ButtonOkText = buttonOkText;
        this.ButtonCancelText = buttonCancelText;
        this.OnButtonOkClick = onButtonOkClick;
        this.OnButtonCancelClick = onButtonCancelClick;
        this.Open(args);
        this.StateHasChanged();
    }

    public void PopupErrors(
        string title = null,
        string[] errors = null,
        string buttonOkText = null,
        string buttonCancelText = null,
        Func<AnimatedModal, object[], Task> onButtonOkClick = null,
        Func<AnimatedModal, object[], Task> onButtonCancelClick = null,
        params object[] args)
    {
        this.InformationLevel = WarningLevel.Error;
        this.Title = title;
        this.errors = errors;
        this.Description = null;
        this.ButtonOkText = buttonOkText;
        this.ButtonCancelText = buttonCancelText;
        this.OnButtonOkClick = onButtonOkClick;
        this.OnButtonCancelClick = onButtonCancelClick;
        this.Open(args ?? new object[0]);
        this.StateHasChanged();
    }

    public enum WarningLevel
    {
        Information = 0,
        Error = 1,
        Warning = 2
    }

    private (string, string) RenderErrorMessage(string errorMessage)
    {
        var propertyNameIndex = errorMessage.IndexOf("'");
        if (propertyNameIndex == -1)
        {
            try
            {
                var propertyName = errorMessage.Substring(propertyNameIndex + 1, errorMessage.IndexOf("'", propertyNameIndex + 1) - propertyNameIndex - 1);
                var restOfMessage = errorMessage.Substring(errorMessage.IndexOf("'", propertyNameIndex + 1) + 1);
                return (propertyName, restOfMessage);
            }
            catch (Exception)
            {
                return ("", errorMessage);
            }
        }
        else
        {
            return ("", errorMessage);
        }
    }
}
